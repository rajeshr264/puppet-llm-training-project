# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# UV package manager
uv.lock
.uv-cache/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.
#  For PyCharm Community Edition, use 'PyCharm CE' instead of 'PyCharm'.
.idea/

# VS Code
.vscode/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# Machine Learning / Data Science specific
*.h5
*.hdf5
*.pkl
*.pickle
*.joblib
*.model
*.weights
checkpoints/
logs/
runs/
wandb/
mlruns/
.neptune/
tensorboard_logs/

# Large data files (adjust patterns as needed)
*.csv
*.tsv
*.jsonl
*.parquet
*.arrow
*.feather
*.xlsx
*.xls
*.zip
*.tar
*.tar.gz
*.7z
*.rar

# Model files (handled in project-specific section below)
*.gguf
*.ggml
*.ckpt

# Temporary files
*.tmp
*.temp
*~
.#*

# IDE and editor files
*.swp
*.swo
*~
.vscode/
.idea/

# Custom project-specific ignores (adjust as needed)
# Uncomment the following lines if you want to ignore certain data directories
# raw_data/
# processed_data/
# models/

# Large files and copyrighted content
data_collection/puppet_8_book.pdf
training/stable-code-3b-base/

# Generated data files (JSON outputs from training/processing)
data_processing/*.json
data_collection/*/*.json
processed_data/*.json
evaluation/*.json
!*_config.json
!pyproject.toml

# Model files and checkpoints (keep structure but not weights)
training/puppet-finetuned-model/
training/puppet-model-*/
!training/puppet-model-*/README.md
!training/puppet-finetuned-model/README.md
